
Take and TakeLast
  When we don't need the whole sequence but only a few elements at beginning or end.
  we can use take() or takeLast()

Skip and SkipLast
  The skip() and skipLast()functions are the counterpart of take()
  and takeLast(),They get an integer N as a parameter

Once and Only once
  An emitting Observable sequence counld emit duplicates
  by error or by design.
  The distinct and distinctUntilChanged() function allow
  us to deal smoothly with duplicates.

distinctUntilChanged
  what if we want to get notified when an Obervable sequence
  emits a new value that is different from the previous one?
  The distinctUntilChanged() filtering function will do the trick


First and last
  The first() and list() methods are quite easy to figure out.
  They emit only the first or last element emitted by Observable.
  Both of them can even get Func1 as a parameter: a predicate
  that can be used to decide the actual first or last element
  we are interested in.

ElementAt
  What if we want only the fifth element emitted by an Observable?
  elementAt()function emits only the n element from a sequence.
  and then it completes.

Sampling
  Let's go back to our Observable temperature sensor.
  it's emitting the current room temperature every second.
  Honestly,we don't think the temperature will change so repidly.
  appending sample() to the Observable source,we will create a new
  Observable sequence that will emit the most reent item emitted
  by the Observable source in a decided time interval

ThrottleFirst
  if we want the first item emitted in the time interval instead of the last item
  use throttleFirst()instead.which means throttleFirst is the opposites of sample()

Timeout
  Let's suppose we are working in a very time-sensitive environment.
  Our temperature sensor is emitting a value every second.
  We want to be absolutely sure we get at least one value every two seconds.
  We can use the timeout()function to mirror the source Observable sequence
  and emit an error if we don't get a value.
  It mirrors the original Observable and fires OnError() if the Observable
  doesn't emit values in the decided time interval.

























































































































































































































